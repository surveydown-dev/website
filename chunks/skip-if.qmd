While basic page navigation is handled using `sd_next()`, you can override this static navigation in your server function with the `sd_skip_if()` function to send the respondent to a forward page based on some condition.

A common example is the need to **screen out** people based on their response(s) to a question. Let's say you need to screen out people who do not own a vehicle. To do this, you would first define a question in your **survey.qmd** file about their vehicle ownership, e.g.:

```{r}
#| echo: fenced

sd_question(
  type  = 'mc',
  id    = 'vehicle_ownership',
  label = "Do you own your vehicle?",
  option = c(
    'Yes' = 'yes',
    'No'  = 'no'
  )
)
```

You would also need to define a screenout page to send respondents to, like this:

```{r}
::: {.sd_page id=screenout}

Sorry, but you are not qualified to take our survey.

:::
```

Then in the server function in the **app.R** file, you can use the `sd_skip_if()` function to define the condition under which the respondent will be sent to the target `screenout` page, like this:

::: {.callout-note}

The `input` object is a Shiny object that stores each question `id` defined by `sd_question()` in your **survey.qmd** file, so whenever referring to a question in a condition, you must use the format `input$question_id`.

:::

```{r}
server <- function(input, output, session) {

  sd_skip_if(
    input$vehicle_ownership == "no" ~ "screenout"
  )

  # ...other server code...

}
```

You can provide multiple conditions to the `sd_skip_if()` function, each separated by a comma. The structure for each condition is always:

> `<condition> ~ "target_page_id"`

In the example above, `input$vehicle_ownership == "no"` is the condition, and `"screenout"` is the target page that the respondent will be sent to if the condition is met.

Take a look at the [Common Conditions](conditional-logic.html#common-conditions) section for examples of other types of supported conditions you can use to conditionally control the survey flow.
